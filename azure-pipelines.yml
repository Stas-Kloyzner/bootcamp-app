# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: w7pool

stages:
- stage: Build
  displayName: Build stage
  
  jobs:
  - job: Build
    displayName: Build

    steps:

    # - task: NodeTool@0
    #   inputs:
    #     versionSpec: '14.x'
    #   displayName: 'Install Node.js'
    
    # - task: Npm@1
    #   inputs:
    #     command: custom
    #     customCommand: 'install -g npm@latest'
    #   displayName: 'Upgrade npm to latest version'
    # - task: file-creator@6
    #   inputs:
    #     filepath: '.env'
    #     filecontent: |
    #       # Host configuration
    #       PORT=8080
    #       HOST=0.0.0.0
    #       HOST_URL=http://20.119.75.115:8080
    #       COOKIE_ENCRYPT_PWD=superAwesomePasswordStringThatIsAtLeast32CharactersLong!
    #       NODE_ENV=development
          
    #       # Okta configuration
    #       OKTA_ORG_URL=https://dev-59598263.okta.com
    #       OKTA_CLIENT_ID=0oa58me7658dghC7K5d7
    #       OKTA_CLIENT_SECRET=yGO-hInM2mbqWBjMiaFq0PVsUdJbwBJeraucqgci
          
    #       # Postgres configuration
    #       PGHOST=staging-vnet-pg-f-server.postgres.database.azure.com
    #       PGUSERNAME=pgadmin
    #       PGDATABASE=postgres
    #       PGPASSWORD=p@sSw0rD
    #       PGPORT=5432
    #     fileoverwrite: true
    #     skipempty: true
    # - task: Npm@1
    #   inputs:
    #     command: install
    #   displayName: 'npm install packages'
 
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'npm install'

    - task: CmdLine@2
      inputs:
        script: 'sudo apt-get -y install zip'
      displayName: 'install zip'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Pipeline.Workspace)/s'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/wt-app.zip'
        replaceExistingArchive: true
        verbose: true
  
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'wt-app'
        publishLocation: 'Container'
    

